"""
TACO Save File Tool - Save files to disk
"""
import os
from typing import Dict, Any, List, Optional
from pathlib import Path

def save_file(filepath: str, 
              content: str, 
              workingdir: str = "",
              create_dirs: bool = True) -> Dict[str, Any]:
    """
    Save content to a file at the specified path.
    
    Args:
        filepath: Path to the file (relative or absolute)
        content: Content to write to the file
        workingdir: Working directory (if filepath is relative)
        create_dirs: Whether to create parent directories if they don't exist
    
    Returns:
        Dict containing save result
    """
    try:
        # Handle working directory
        if workingdir:
            workingdir = os.path.expanduser(workingdir)
            if not os.path.isabs(filepath):
                filepath = os.path.join(workingdir, filepath)
        
        # Expand user path
        filepath = os.path.expanduser(filepath)
        
        # Create parent directories if needed
        if create_dirs:
            parent_dir = os.path.dirname(filepath)
            if parent_dir:
                Path(parent_dir).mkdir(parents=True, exist_ok=True)
        
        # Write the file
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return {
            'status': 'success',
            'filepath': filepath,
            'size': len(content),
            'message': f"File saved successfully: {filepath}"
        }
        
    except Exception as e:
        return {
            'status': 'error',
            'message': f"Failed to save file: {str(e)}",
            'filepath': filepath
        }

def save_code(code_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    Save code generated by create_code tool, including code files and requirements.
    
    This is a specialized version of save_file that handles the output from create_code.
    
    Args:
        code_data: Output from create_code tool containing code, metadata, and configuration
    
    Returns:
        Dict containing results of saving all files
    """
    saved_files = []
    errors = []
    
    # Extract data from code_data
    code = code_data.get('code', '')
    filename = code_data.get('filename', 'generated_code.txt')
    workingdir = code_data.get('workingdir', '.')
    requirements = code_data.get('requirements', [])
    requirements_file = code_data.get('requirements_file', 'requirements.txt')
    description = code_data.get('description', '')
    language = code_data.get('language', 'text')
    
    # Save the main code file
    code_result = save_file(
        filepath=filename,
        content=code,
        workingdir=workingdir
    )
    
    if code_result['status'] == 'success':
        saved_files.append(code_result['filepath'])
    else:
        errors.append(code_result['message'])
    
    # Save requirements file if needed
    if requirements:
        req_content = '\n'.join(requirements)
        req_result = save_file(
            filepath=requirements_file,
            content=req_content,
            workingdir=workingdir
        )
        
        if req_result['status'] == 'success':
            saved_files.append(req_result['filepath'])
        else:
            errors.append(req_result['message'])
    
    # Create a documentation file
    doc_content = f"""# Generated Code Documentation

**Description:** {description}
**Language:** {language}
**Generated File:** {filename}

## Code

```{language}
{code}
```

## Requirements

{chr(10).join(f"- {req}" for req in requirements) if requirements else "No external requirements."}
"""
    
    doc_result = save_file(
        filepath="generated_code.md",
        content=doc_content,
        workingdir=workingdir
    )
    
    if doc_result['status'] == 'success':
        saved_files.append(doc_result['filepath'])
    else:
        errors.append(doc_result['message'])
    
    # Return results
    if errors:
        return {
            'status': 'partial' if saved_files else 'error',
            'saved_files': saved_files,
            'errors': errors,
            'message': f"Some files saved with errors: {'; '.join(errors)}"
        }
    else:
        return {
            'status': 'success',
            'saved_files': saved_files,
            'workingdir': workingdir,
            'message': f"All files saved successfully in {workingdir}"
        }

# Tool descriptions
def _get_tool_description():
    """Get description for save_file tool"""
    return """save_file: Save content to a file

This tool saves content to a file at the specified path.

Parameters:
- filepath (string): Path to the file [REQUIRED]
- content (string): Content to write [REQUIRED]
- workingdir (string): Working directory for relative paths
- create_dirs (boolean): Create parent directories if needed (default: true)
"""

def _get_save_code_description():
    """Get description for save_code tool"""
    return """save_code: Save code generated by create_code tool

This specialized tool saves code files generated by the create_code tool.
It handles saving the main code file, requirements file, and documentation.

Parameters:
- code_data (object): Output from create_code tool [REQUIRED]
"""

def _get_usage_instructions():
    """Get usage instructions for save tools"""
    return """
The save tools handle writing files to disk.

save_file: General-purpose file saving
```json
{
  "tool_call": {
    "name": "save_file",
    "parameters": {
      "filepath": "example.txt",
      "content": "Hello, world!",
      "workingdir": "~/documents"
    }
  }
}
```

save_code: Specialized for saving code generation results
```json
{
  "tool_call": {
    "name": "save_code",
    "parameters": {
      "code_data": <output from create_code tool>
    }
  }
}
```

The save_code tool is typically called after create_code to save all generated files.
"""

# Attach descriptions to functions
save_file._get_tool_description = _get_tool_description
save_file._get_usage_instructions = _get_usage_instructions

save_code._get_tool_description = _get_save_code_description
save_code._get_usage_instructions = _get_usage_instructions